Index: src/GradeTracker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class GradeTracker implements Serializable {\r\n    private final ArrayList<Student> students = new ArrayList<>();\r\n    public static final Scanner input = new Scanner(System.in);\r\n    public static void main(String[] args) {\r\n        // Runs the programme and prints the options\r\n        run();\r\n    }\r\n\r\n    public static void run() {\r\n        System.out.printf(\"Welcome to the Student Tracker Application.%n%n\");\r\n        GradeTracker gradeTracker = new GradeTracker();\r\n\r\n        int choice = 0;\r\n\r\n        while (choice != 5) {\r\n            choice = nextInt(String.format(\r\n                    \"%nPlease select the following menu options:%n\" +\r\n                    \"1. Student Management%n\" +\r\n                    \"2. Module Management%n\" +\r\n                    \"3. Assessment Management%n\" +\r\n                    \"4. Save/Load File%n\" +\r\n                    \"5. End Programme%n\" +\r\n                    \"Enter Choice: \"));\r\n\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    gradeTracker.studentManagementOptions();\r\n                    break;\r\n                case 2:\r\n                    gradeTracker.moduleManagementOptions();\r\n                    break;\r\n                case 3:\r\n                    gradeTracker.assessmentManagementOptions();\r\n                    break;\r\n                case 4:\r\n                    int subChoice = nextInt(\"\"\"\r\n\r\n                            Save/Load\r\n                            1. Save\r\n                            2. Load\r\n                            3. Exist\r\n                            Enter:\\s\"\"\");\r\n                    switch (subChoice) {\r\n                        case 1:\r\n                            try {\r\n                                save(gradeTracker);\r\n                            } catch (RuntimeException e) {\r\n                                System.out.println(\"Unable to save file!\");\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            try {\r\n                                gradeTracker = load();\r\n                            } catch (RuntimeException e) {\r\n                                System.out.println(\"Unable to load save file\");\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (choice != 5) {\r\n                        System.out.println(\"Please select a correct option\");\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        System.out.printf(\"%n%nApplication Closed!%nHave a Nice Day!\");\r\n    }\r\n\r\n    public void studentManagementOptions() {\r\n        int subChoice = 0;\r\n        while(subChoice != 5) {\r\n\r\n            subChoice = nextInt(String.format(\r\n                    \"%nStudent Management Options:%n\" +\r\n                            \"1. Student Management%n\" +\r\n                            \"2. Create New Student%n\" +\r\n                            \"3. Delete New Students%n\" +\r\n                            \"4. View all Students%n\" +\r\n                            \"5. Return to Main Menu%n\" +\r\n                            \"Enter Choice: \"));\r\n\r\n            switch (subChoice) {\r\n                case 1:\r\n                    studentManagement();\r\n                    break;\r\n                case 2:\r\n                    System.out.println();\r\n                    addNewStudent();\r\n                    break;\r\n                case 3:\r\n                    System.out.println();\r\n                    deleteStudent();\r\n                    break;\r\n                case 4:\r\n                    System.out.println();\r\n                    viewAllStudentDetails();\r\n                    break;\r\n                default:\r\n                    if (subChoice != 5) {\r\n                        System.out.printf(\"%nPlease select the correct option\");\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void studentManagement() {\r\n        String name = getStudentName();\r\n        String studentID = getStudentID();\r\n        if (!checkIfStudent(name, studentID)) {\r\n            System.out.println(\"Please enter a valid student!\");\r\n        } else {\r\n            int subChoice = 0;\r\n            while(subChoice != 6) {\r\n                subChoice = nextInt(String.format(\r\n                        \"%n%s's Management Options:%n\" +\r\n                                \"1. Add or Remove Modules%n\" +\r\n                                \"2. Add or Remove Module's Assessments%n\" +\r\n                                \"3. Add or Remove Assessment Marks%n\" +\r\n                                \"4. Results Calculations%n\" +\r\n                                \"5. Display all modules & Assessments%n\" +\r\n                                \"6. Return to Main Menu%n\" +\r\n                                \"Enter Choice: \", name));\r\n\r\n                switch (subChoice) {\r\n                    case 1 -> addRemoveMod(name);\r\n                    case 2 -> addRemoveAssess(name, studentID);\r\n                    case 3 -> addOrRemoveMarks(name, studentID);\r\n                    case 4 -> calculateResults(name, studentID);\r\n                    case 5 -> displayModAssess(name);\r\n                    default -> {\r\n                        if (subChoice != 6) {\r\n                            System.out.printf(\"%nPlease select the correct option\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addRemoveMod(String name) {\r\n        int subChoice = 0;\r\n        while(subChoice != 3) {\r\n            subChoice = nextInt(String.format(\r\n                    \"%nAdd or Remove Module Options:%n\" +\r\n                            \"1. Add Modules%n\" +\r\n                            \"2. Remove Module%n\" +\r\n                            \"3. Return to Previous Menu%n\" +\r\n                            \"Enter Choice: \"));\r\n\r\n            switch (subChoice) {\r\n                case 1 -> addStuMod(name);\r\n                case 2 -> removeStuMod();\r\n                default -> {\r\n                    if (subChoice != 3) {\r\n                        System.out.printf(\"%nPlease select the correct option\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addStuMod(String name) {\r\n        ModListSaveFile modListSaveFile = new ModListSaveFile();\r\n        System.out.println(\"\\nIndex : Programme : Module Code : Description : Credits Units\");\r\n        int x = 1;\r\n        for (Module mod : modListSaveFile.getModules()) {\r\n            System.out.printf(\"%d: %s, %s, %s, %d%n\", (x),\r\n                    mod.getName(),mod.getModuleCode(),\r\n                    mod.getDescription(), mod.getCreditUnits());\r\n            x++;\r\n        }\r\n\r\n        System.out.print(\"\\nEnter Module Code of the module you would like to add: \");\r\n        String moduleCode = input.nextLine();\r\n\r\n        boolean checkIfModAdded = false;\r\n        for (Module addMod : modListSaveFile.getModules()) {\r\n            if (moduleCode.equals(addMod.getModuleCode())) {\r\n                this.students.\r\n                        get(getStudentIndex(name)).setModules(\r\n                        addMod.getName(), addMod.getModuleCode(),\r\n                        addMod.getDescription(), addMod.getCreditUnits());\r\n\r\n                this.students.\r\n                        get(getStudentIndex(name)).\r\n                        getModules().get(\r\n                                getStudentIndex(addMod.getName())\r\n                        ).setAssessmentsObj(addMod.getAssessments());\r\n\r\n                System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n                this.students.get(getStudentIndex(name)).\r\n                        getModuleList(this.students.\r\n                                get(getStudentIndex(name)).getModuleIndex(addMod.getName()));\r\n                checkIfModAdded = true;\r\n            }\r\n        }\r\n        if (!checkIfModAdded) {\r\n            System.out.println(\"Please enter a valid module code.\");\r\n        }\r\n\r\n    }\r\n\r\n    public void removeStuMod() {\r\n        if (this.students.size() > 0) {\r\n            String name = getStudentName();\r\n            String studentID = getStudentID();\r\n            String moduleName = getModuleName();\r\n\r\n            // Check if student already exists\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    this.students.get(getStudentIndex(name)).\r\n                            removeModules(this.students.get(getStudentIndex(name))\r\n                                    .getModuleIndex(moduleName));\r\n\r\n                    System.out.printf(\"%nModule Removed Successfully\");\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void addRemoveAssess(String name, String studentID) {\r\n        displayStudentModules(name, studentID);\r\n        System.out.println(\"\"\"\r\n                Please enter the module code you would like to add\r\n                OR\r\n                Enter \"Return\" to Return to Previous Menu\r\n                Enter:\"\"\");\r\n        String choice = input.nextLine();\r\n\r\n        int moduleIndexNumber = this.students.get(getStudentIndex(name)).getModuleIndex(choice);\r\n\r\n        if (!choice.equals(\"Return\"))  {\r\n            if (moduleIndexNumber >= 0) {\r\n                String moduleName = this.students.get(getStudentIndex(name)).\r\n                        getModules().get(moduleIndexNumber).getName();\r\n                int subChoice = 0;\r\n                while(subChoice != 3) {\r\n                    subChoice = nextInt(String.format(\r\n                            \"%nAdd or Remove Assessment Options:%n\" +\r\n                                    \"1. Add Assessment%n\" +\r\n                                    \"2. Remove Assessment%n\" +\r\n                                    \"3. Return to Previous Menu%n\" +\r\n                                    \"Enter Choice: \"));\r\n\r\n                    switch (subChoice) {\r\n                        case 1 -> addStudentAssessments(name, moduleName);\r\n                        case 2 -> removeStudentAssessments(name, studentID, moduleName);\r\n                        default -> {\r\n                            if (subChoice != 3) {\r\n                                System.out.printf(\"%nPlease select the correct option\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Please enter a valid choice\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addStudentAssessments(String name, String moduleName) {\r\n        if (checkIfModule(name, moduleName)) {\r\n            AssessListSaveFile assessListSaveFile = new AssessListSaveFile();\r\n            System.out.printf(\"%nTest - Assessment Code - Descriptor - Total Achievable Marks - Weightage%n\");\r\n            int x = 1;\r\n            for (Assessment assessment : assessListSaveFile.getAssessment()) {\r\n                System.out.printf(\"%d: %s, %s, %s, %.0f, %.0f%n\", (x),\r\n                        assessment.getName(), assessment.getAssessmentCode(),assessment.getDescription(),\r\n                        assessment.getTotalMarks(), assessment.getWeightage());\r\n                x++;\r\n            }\r\n\r\n            System.out.print(\"\\nEnter Assessment Code of the module you would like to add: \");\r\n            String assessmentCode = input.nextLine();\r\n\r\n            boolean checkIfAssessmentAdded = false;\r\n            for (Assessment addAssessment : assessListSaveFile.getAssessment()) {\r\n                if (assessmentCode.equals(addAssessment.getAssessmentCode())) {\r\n                    int moduleIndex = this.students.get(getStudentIndex(name)).getModuleIndex(moduleName);\r\n                    this.students.get(getStudentIndex(name)).getModules().\r\n                            get(moduleIndex).\r\n                            getAssessments().\r\n                            add(new Assessment(\r\n                                    addAssessment.getName(),\r\n                                    addAssessment.getAssessmentCode(),\r\n                                    addAssessment.getDescription(),\r\n                                    addAssessment.getTotalMarks(),\r\n                                    addAssessment.getWeightage())\r\n                            );\r\n\r\n\r\n                    System.out.printf(\"%nTest - Assessment Code - Descriptor - Total Achievable Marks - Weightage%n\");\r\n                    this.students.get(getStudentIndex(name)).getModules().get(moduleIndex).getAllAssessments();\r\n                    checkIfAssessmentAdded = true;\r\n                }\r\n            }\r\n            if (!checkIfAssessmentAdded) {\r\n                System.out.println(\"Please enter a valid assessment code.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Module doesn't exist. Please enter the correct module.\");\r\n        }\r\n    }\r\n\r\n    public void removeStudentAssessments(String name, String studentID, String moduleName) {\r\n        if (this.students.size() > 0) {\r\n            System.out.printf(\"%nTest - Assessment Code - Descriptor - Total Achievable Marks - Weightage%n\");\r\n            displayStudentModAssess(name, studentID, moduleName);\r\n\r\n            String assessmentName = getAssessmentName();\r\n\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    if (checkIfAssessment(name, moduleName, assessmentName)) {\r\n                        this.students.\r\n                                get(getStudentIndex(name)).\r\n                                getModules().\r\n                                get(getStudentIndex(moduleName)).\r\n                                getAssessments().\r\n                                remove(getStudentIndex(assessmentName));\r\n                    } else {\r\n                        System.out.println(\"There is no assessments assign to this modules!\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void calculateResults(String name, String studentID) {\r\n        int choice = 0;\r\n        while (choice != 4) {\r\n            choice = nextInt(String.format(\r\n                    \"1. Calculate GPA%n\" +\r\n                    \"2. Calculate module grade\" +\r\n                    \"3. Calculate module marks\" +\r\n                    \"4. Return to Previous Menu\" +\r\n                    \"Enter: \"\r\n            ));\r\n            switch (choice) {\r\n                case 1 -> calculateStudentGPA(name, studentID);\r\n                case 2 -> calculateStudentGrade(name, studentID);\r\n                case 3 -> calculateStudentMarks(name, studentID);\r\n                default -> {\r\n                    if (choice != 4) {\r\n                        System.out.println(\"Please Enter a Valid Choice!\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void calculateStudentGPA(String name, String studentID) {\r\n        if (this.students.size() > 0) {\r\n            // Check if student already exists\r\n            if (checkIfStudent(name,studentID)) {\r\n                System.out.printf(\"%n%s's GPA is: %.2f\", name,\r\n                        this.students.get(getStudentIndex(name)).getGPA());\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void calculateStudentGrade(String name, String studentID) {\r\n        if (this.students.size() > 0) {\r\n            System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n            displayStudentModules(name, studentID);\r\n            String moduleName = getModuleName();\r\n\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    System.out.printf(\"%nGrade: %s\", this.students.get(getStudentIndex(name)).\r\n                            getModules().get(students.get(getStudentIndex(name)).\r\n                                    getModuleIndex(moduleName)).getOverallGrade());\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void addOrRemoveMarks(String name, String studentID) {\r\n        if (this.students.size() > 0) {\r\n            displayStudentModules(name, studentID);\r\n            String moduleName = getModuleName();\r\n\r\n            displayStudentModAssess(name, studentID, moduleName);\r\n            String assessmentName = getAssessmentName();\r\n\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    if (checkIfAssessment(name, moduleName, assessmentName)) {\r\n\r\n                        int choice = nextInt(String.format(\r\n                                \"%nMarks Setter/Remover%n\" +\r\n                                        \"1. Set Marks%n\" +\r\n                                        \"2. Remove Marks%n\" +\r\n                                        \"3. Return to Previous Menu%n\" +\r\n                                        \"Enter: \"));\r\n\r\n                        switch (choice) {\r\n                            case 1 -> {\r\n                                // Display marks between 0 to total achievable marks\r\n                                System.out.println(\"Marks between 0 to \" + this.students.\r\n                                        get(getStudentIndex(name)).\r\n                                        getModules().\r\n                                        get(this.students.\r\n                                                get(getStudentIndex(name)).\r\n                                                getModuleIndex(moduleName)\r\n                                        ).\r\n                                        getAssessments().\r\n                                        get(this.students.\r\n                                                get(getStudentIndex(name)).\r\n                                                getModules().\r\n                                                get(this.students.\r\n                                                        get(getStudentIndex(name)).\r\n                                                        getModuleIndex(moduleName)\r\n                                                ).getAssessmentIndex(assessmentName)\r\n                                        ).getTotalMarks());\r\n                                double marks = nextDouble(String.format(\"%nEnter Marks: \"));\r\n\r\n                                // Add Marks\r\n                                try {\r\n                                    this.students.\r\n                                            get(getStudentIndex(name)).\r\n                                            getModules().\r\n                                            get(this.students.\r\n                                                    get(getStudentIndex(name)).\r\n                                                    getModuleIndex(moduleName)\r\n                                            ).\r\n                                            getAssessments().\r\n                                            get(this.students.\r\n                                                    get(getStudentIndex(name)).\r\n                                                    getModules().\r\n                                                    get(this.students.\r\n                                                            get(getStudentIndex(name)).\r\n                                                            getModuleIndex(moduleName)\r\n                                                    ).getAssessmentIndex(assessmentName)\r\n                                            ).setMarks(marks);\r\n                                } catch (IllegalArgumentException exception) {\r\n                                    System.out.println(\"Please enter a valid mark!\");\r\n                                }\r\n                                System.out.println(\"Marks Added!\");\r\n                            }\r\n                            case 2 -> {\r\n                                // Remove Marks\r\n                                this.students.\r\n                                        get(getStudentIndex(name)).\r\n                                        getModules().\r\n                                        get(this.students.\r\n                                                get(getStudentIndex(name)).\r\n                                                getModuleIndex(moduleName)).\r\n                                        getAssessments().get(\r\n                                                (this.students.\r\n                                                        get(getStudentIndex(name)).\r\n                                                        getModules().\r\n                                                        get(this.students.\r\n                                                                get(getStudentIndex(name)).\r\n                                                                getModuleIndex(moduleName)\r\n                                                        ).getAssessmentIndex(assessmentName)\r\n                                                )\r\n                                        ).removeMarks();\r\n                                System.out.println(\"Marks Removed!\");\r\n                            }\r\n                            default -> {\r\n                            }\r\n                        }\r\n                    } else {\r\n                        System.out.println(\"There is no assessments assign to this modules!\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void calculateStudentMarks(String name, String studentID) {\r\n        if (this.students.size() > 0) {\r\n            System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n            displayStudentModules(name, studentID);\r\n            String moduleName = getModuleName();\r\n\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    System.out.printf(\"%nTotal Marks: %.0f%%\",\r\n                            (this.students.get(getStudentIndex(name)).\r\n                                    getModules().get(students.get(getStudentIndex(name)).\r\n                                            getModuleIndex(moduleName)).getOverallMarks()) * 100);\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void displayModAssess(String name) {\r\n        System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n        for (Module module : this.students.get(getStudentIndex(name)).getModules()) {\r\n            System.out.printf(\"%s - %s - %s -%d\",module.getName(), module.getModuleCode(),\r\n                    module.getDescription(), module.getCreditUnits());\r\n\r\n            System.out.printf(\"%nTest - Assessment Code - Descriptor - Total Achievable Marks - Weightage%n\");\r\n            for (Assessment assessment : module.getAssessments()) {\r\n                System.out.printf(\"%s - %s - %s - %.0f - %.0f\", assessment.getName(), assessment.getAssessmentCode(),\r\n                        assessment.getDescription(), assessment.getTotalMarks(), assessment.getWeightage());\r\n            }\r\n            System.out.println(\"\\n\\n\\n\");\r\n        }\r\n    }\r\n\r\n    public void addNewStudent() {\r\n        String name = getStudentName();\r\n        String studentID = getStudentID();\r\n\r\n        // Check if student already exists\r\n        if (!checkIfStudent(name,studentID)) {\r\n            this.students.add(new Student(name, studentID));\r\n            System.out.println(\"Name - Student ID\");\r\n            System.out.printf(\"%s - %s%n\", this.students.get(getStudentIndex(name)).getName(),\r\n                    this.students.get(getStudentIndex(name)).getStudentID());\r\n            System.out.println();\r\n            System.out.printf(\"%nStudent Added Successfully\");\r\n        } else {\r\n            System.out.printf(\"%nStudent already exist!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void deleteStudent() {\r\n        if (this.students.size() > 0) {\r\n            String name = getStudentName();\r\n            String studentID = getStudentID();\r\n            // Check if student already exists\r\n            if (checkIfStudent(name,studentID)) {\r\n                this.students.remove(getStudentIndex(name));\r\n                System.out.printf(\"%nStudent Removed Successfully\");\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void viewAllStudentDetails() {\r\n        System.out.println(\"Index - Name - Student ID\");\r\n        for (int i = 0; i < this.students.size(); i++) {\r\n            System.out.printf(\"%d: %s - %s%n\", i+1, this.students.get(i).getName(),\r\n                    this.students.get(i).getStudentID());\r\n        }\r\n    }\r\n\r\n    // Checks if the student exist in the Students Array List if so, return true if not returns false\r\n    public boolean checkIfStudent(String name, String studentID) {\r\n        if (this.students.size() > 0) {\r\n            for (Student student : students) {\r\n                if (student.getName().equals(name) &&\r\n                        student.getStudentID().equals(studentID)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    // Module Management & Methods\r\n    public void moduleManagementOptions() {\r\n        int subChoice = 0;\r\n        while(subChoice != 6) {\r\n            subChoice = nextInt(String.format(\r\n                    \"%nModule Management Options:%n\" +\r\n                    \"1. Add modules to student%n\" +\r\n                    \"2. Remove modules from student%n\" +\r\n                    \"3. Calculate Student's marks for module%n\" +\r\n                    \"4. Calculate Student's grade for module%n\" +\r\n                    \"5. Display all Student's modules%n\" +\r\n                    \"6. Return to Main Menu%n\" +\r\n                    \"Enter Choice: \"\r\n            ));\r\n\r\n            switch (subChoice) {\r\n                case 1:\r\n                    System.out.println();\r\n                    addModule();\r\n                    break;\r\n                case 2:\r\n                    System.out.println();\r\n                    removeModule();\r\n                    break;\r\n                /*.\r\n                case 3:\r\n                    System.out.println();\r\n                    calculateStudentMarks();\r\n                    break;\r\n                case 4:\r\n                    System.out.println();\r\n                    calculateStudentGrade();\r\n                    break;\r\n                case 5:\r\n                    System.out.println();\r\n                    displayAllStudentModules();\r\n                    break;\r\n                 */\r\n                default:\r\n                    if (subChoice != 6) {\r\n                        System.out.printf(\"%nPlease select the correct option\");\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addModule() {\r\n        String name = getStudentName();\r\n        String studentID = getStudentID();\r\n\r\n        int subChoice = nextInt(\"\"\"\r\n                Would you like to\r\n                1. Add custom module\r\n                2. Add predefined module\r\n                3. Exit\r\n                Enter:\\s\"\"\");\r\n\r\n        switch (subChoice) {\r\n            case 1:\r\n                if (students.size() > 0) {\r\n                    if (checkIfStudent(name, studentID)) {\r\n                        System.out.printf(\"%nEnter Module Name: \");\r\n                        String moduleName = input.nextLine();\r\n\r\n                        System.out.print(\"Enter Module Code: \");\r\n                        String moduleCode = input.nextLine();\r\n\r\n                        System.out.print(\"Enter Descriptor: \");\r\n                        String descriptor = input.nextLine();\r\n\r\n                        int creditUnits = nextInt(\"Enter CreditUnits: \");\r\n\r\n                        this.students.get(getStudentIndex(name)).\r\n                                setModules(moduleName, moduleCode, descriptor, creditUnits);\r\n\r\n                        System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n                        this.students.get(getStudentIndex(name)).\r\n                                getModuleList(this.students.\r\n                                        get(getStudentIndex(name)).getModuleIndex(moduleName));\r\n\r\n                    } else {\r\n                        System.out.printf(\"%nStudent does not exist!\");\r\n                    }\r\n                } else {\r\n                    System.out.printf(\"%nThere is no student in the list!\");\r\n                }\r\n                System.out.println();\r\n                break;\r\n            case 2:\r\n                System.out.println(\"\\nIndex : Name : Module Code : Description : Credits Units\");\r\n                int x = 1;\r\n                for (PreDefMod mod : PreDefMod.values()) {\r\n                    System.out.printf(\"%d: %s, %s, %s, %d%n\", (x),\r\n                            mod.getName(),mod.getModuleCode(),\r\n                            mod.getDescription(), mod.getCreditUnits());\r\n                    x++;\r\n                }\r\n                System.out.print(\"\\nEnter Module Code of the module you would like to add: \");\r\n                String moduleCode = input.nextLine();\r\n\r\n                boolean checkIfModAdded = false;\r\n                for (PreDefMod addMod : PreDefMod.values()) {\r\n                    if (moduleCode.equals(addMod.getModuleCode())) {\r\n                        this.students.get(getStudentIndex(name)).setModules(\r\n                                addMod.getName(), addMod.getModuleCode(),\r\n                                addMod.getDescription(), addMod.getCreditUnits());\r\n\r\n                        this.students.\r\n                                get(getStudentIndex(name)).\r\n                                getModules().get(\r\n                                        getStudentIndex(addMod.getName())\r\n                                ).setAssessmentsObj(addMod.getAssessments());\r\n\r\n                        System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n                        this.students.get(getStudentIndex(name)).\r\n                                getModuleList(this.students.\r\n                                        get(getStudentIndex(name)).getModuleIndex(addMod.getName()));\r\n                        checkIfModAdded = true;\r\n                    }\r\n                }\r\n                if (!checkIfModAdded) {\r\n                    System.out.println(\"Please enter a valid module code.\");\r\n                }\r\n                break;\r\n            case 3:\r\n                break;\r\n            default:\r\n                System.out.println(\"Please input a value between 1 - 3\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    public void removeModule() {\r\n        if (this.students.size() > 0) {\r\n            String name = getStudentName();\r\n            String studentID = getStudentID();\r\n            String moduleName = getModuleName();\r\n\r\n            // Check if student already exists\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    this.students.get(getStudentIndex(name)).\r\n                            removeModules(this.students.get(getStudentIndex(name))\r\n                                    .getModuleIndex(moduleName));\r\n\r\n                    System.out.printf(\"%nModule Removed Successfully\");\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void displayStudentModules(String name, String studentID) {\r\n        if (this.students.size() > 0) {\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (this.students.get(getStudentIndex(name)).getModules().isEmpty()) {\r\n                    System.out.println(\"There is no modules assigned to \" + name);\r\n                } else {\r\n                    System.out.printf(\"%nProgramme - Module Code - Descriptor - Credit Units%n\");\r\n                    this.students.get(getStudentIndex(name)).getAllModules();\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n\r\n    public boolean checkIfModule(String name, String moduleName) {\r\n        if (this.students.get(getStudentIndex(name)).getModules().size() > 0) {\r\n            return this.students.\r\n                    get(getStudentIndex(name)).\r\n                    getModules().\r\n                    get(this.students.\r\n                            get(getStudentIndex(name)).\r\n                            getModuleIndex(moduleName)\r\n                    ).getName().\r\n                    equals(moduleName);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Assessment Management & Methods\r\n    public void assessmentManagementOptions() {\r\n        int subChoice = 0;\r\n        while(subChoice != 5) {\r\n            subChoice = nextInt(String.format(\r\n                    \"%nAssessment Management Options:%n\" +\r\n                    \"1. Add any number of Assessments to a Module that is assigned to a student%n\" +\r\n                    \"2. Remove any Assessment in a Module assigned to a student%n\" +\r\n                    \"3. Set or Remove marks from Assessment%n\" +\r\n                    \"4. Display all assessment for a module taken by a student%n\" +\r\n                    \"5. Return to Main Menu%n\" +\r\n                    \"Enter Choice: \"\r\n            ));\r\n\r\n            switch (subChoice) {\r\n                case 1:\r\n                    System.out.println();\r\n                    addAssessments();\r\n                    break;\r\n                case 2:\r\n                    System.out.println();\r\n                    removeAssessments();\r\n                    break;\r\n                /*.\r\n                case 3:\r\n                    System.out.println();\r\n                    addOrRemoveMarks();\r\n                    break;\r\n                case 4:\r\n                    System.out.println();\r\n                    displayAllStudentModelsAssessments();\r\n                    break;\r\n                 */\r\n                default:\r\n                    if (subChoice != 5) {\r\n                        System.out.printf(\"%nPlease select the correct option\");\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addAssessments() {\r\n        if (this.students.size() > 0) {\r\n            String name = getStudentName();\r\n            String studentID = getStudentID();\r\n            String moduleName = getModuleName();\r\n\r\n            System.out.printf(\"%nEnter Assessment's Name: \");\r\n            String assessmentName = input.nextLine();\r\n\r\n            System.out.print(\"Enter Assessment Code: \");\r\n            String assessmentCode = input.nextLine();\r\n\r\n            System.out.print(\"Enter Descriptor: \");\r\n            String descriptor = input.nextLine();\r\n\r\n            double totalMarks = nextDouble(\"Enter total achievable marks: \");\r\n\r\n            double weightage = nextDouble(\"Enter weightage percent: \");\r\n\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    double totalWeightage = 0;\r\n                    for (Assessment assessments : this.students.\r\n                            get(getStudentIndex(name)).\r\n                            getModules().get(getStudentIndex(moduleName)).\r\n                            getAssessments()) {\r\n                        totalWeightage += assessments.getWeightage();\r\n                        }\r\n                    if (!((weightage += totalWeightage) > 100)) {\r\n                        this.students.\r\n                                get(getStudentIndex(name)).\r\n                                getModules().get(\r\n                                        getStudentIndex(moduleName)\r\n                                ).setAssessments(assessmentName, assessmentCode, descriptor, totalMarks, weightage);\r\n\r\n                        System.out.printf(\"%nTest - Assessment Code\" +\r\n                                \" - Descriptor - Total Achievable Marks - Weightage%n\");\r\n                        this.students.\r\n                                get(getStudentIndex(name)).\r\n                                getModules().get(getStudentIndex(moduleName)).\r\n                                getAssessmentList(\r\n                                        this.students.\r\n                                        get(getStudentIndex(name)).\r\n                                        getModules().\r\n                                        get(getStudentIndex(moduleName)).\r\n                                                getAssessmentIndex(assessmentName)\r\n                                );\r\n                        } else {\r\n                        double maxWeightage = 100 - totalWeightage;\r\n                        if (maxWeightage <= 0) {\r\n                            System.out.printf(\"%nMaximum weightage has already been achieve,%n\" +\r\n                                    \"Please remove existing assessments to add new assessments\");\r\n                        } else {\r\n                            System.out.printf(\"%nThe weightage entered is not valid!%n\" +\r\n                                    \"Please enter a value >= %.0f\", maxWeightage);\r\n                        }\r\n                    }\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void removeAssessments() {\r\n        if (this.students.size() > 0) {\r\n            String name = getStudentName();\r\n            String studentID = getStudentID();\r\n            String moduleName = getModuleName();\r\n            String assessmentName = getAssessmentName();\r\n\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    if (checkIfAssessment(name, moduleName, assessmentName)) {\r\n                        this.students.\r\n                                get(getStudentIndex(name)).\r\n                                getModules().\r\n                                get(getStudentIndex(moduleName)).\r\n                                getAssessments().\r\n                                remove(getStudentIndex(assessmentName));\r\n                    } else {\r\n                        System.out.println(\"There is no assessments assign to this modules!\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void displayStudentModAssess(String name, String studentID, String moduleName) {\r\n        if (this.students.size() > 0) {\r\n            if (checkIfStudent(name,studentID)) {\r\n                if (checkIfModule(name, moduleName)) {\r\n                    if (this.students.get(getStudentIndex(name)).\r\n                            getModules().get(this.students.get(\r\n                                    getStudentIndex(name)).\r\n                                    getModuleIndex(moduleName)\r\n                            ).getAssessments().isEmpty()) {\r\n                        System.out.printf(\"There is no assessments assigned to %s\", moduleName);\r\n                    } else {\r\n                        System.out.printf(\"%nTest - Descriptor - Total Achievable Marks - Weightage%n\");\r\n                        this.students.\r\n                                get(getStudentIndex(name)).\r\n                                getModules().\r\n                                get(this.students.get(\r\n                                        getStudentIndex(name)).\r\n                                        getModuleIndex(moduleName)).\r\n                                getAllAssessments();\r\n                    }\r\n                } else {\r\n                    System.out.println(\"There is no modules assign to this student!\");\r\n                }\r\n            } else {\r\n                System.out.printf(\"%nStudent does not exist!\");\r\n            }\r\n            System.out.println();\r\n\r\n        } else {\r\n            System.out.printf(\"%nThere is no student in the list!\");\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n\r\n    // Check if assessment exist in Array List if so, return true if not returns false\r\n    public boolean checkIfAssessment(String name, String moduleName, String assessmentName) {\r\n        if (this.students.get(getStudentIndex(name)).getModules().size() > 0) {\r\n            return this.students.\r\n                    get(getStudentIndex(name)).\r\n                    getModules().\r\n                    get(this.students.\r\n                            get(getStudentIndex(name)).\r\n                            getModuleIndex(moduleName)).\r\n                    getAssessments().get(this.students.\r\n                            get(getStudentIndex(name)).\r\n                            getModuleIndex(moduleName)).\r\n                    getName().\r\n                    equals(assessmentName);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Commonly used methods\r\n    // Gets Student name\r\n    public String getStudentName() {\r\n        // Ask user for name of student\r\n        System.out.print(\"Enter student's name: \");\r\n        return input.nextLine();\r\n    }\r\n\r\n    // Gets Student ID\r\n    public String getStudentID() {\r\n        // Ask user for studentID of student\r\n        System.out.print(\"Enter studentID number: \");\r\n        return input.nextLine();\r\n    }\r\n\r\n    // Gets Module Name\r\n    public String getModuleName() {\r\n        System.out.print(\"Enter Module Name: \");\r\n        return input.nextLine();\r\n    }\r\n\r\n    // Gets Assessment Name\r\n    public String getAssessmentName() {\r\n        System.out.print(\"Enter Assessment's Name: \");\r\n        return input.nextLine();\r\n    }\r\n\r\n    // Gets the Student's Index Number in the Students Array List\r\n    public int getStudentIndex(String name) {\r\n        int index = 0;\r\n        if (this.students.size() > 0){\r\n            for (int x = 0; x < this.students.size(); x++) {\r\n                if ((this.students.get(x).getName()).equals(name)) {\r\n                    index = x;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    // Used for exception handling when user inputs a wrong data type into an Integer\r\n    public static int nextInt(String prompt) {\r\n        System.out.print(prompt);\r\n        while (!input.hasNextInt()) {\r\n            System.out.printf(\"Incorrect format for number%n\" +\r\n                    \"Please re-enter number: \");\r\n            input.next(); // remove and ignore next token\r\n        }\r\n        int x = input.nextInt();\r\n        input.nextLine();\r\n        return x;\r\n    }\r\n\r\n    // Double Version\r\n    public static double nextDouble(String prompt) {\r\n        System.out.print(prompt);\r\n        while (!input.hasNextDouble()) {\r\n            System.out.print(\r\n                    \"Incorrect format for number: please try again: \");\r\n            input.next(); // remove and ignore next token\r\n        }\r\n        return input.nextDouble();\r\n    }\r\n\r\n    // Save Grade Tracker info into Save.txt file in src folder\r\n    public static void save(GradeTracker gradeTracker) {\r\n        try {\r\n            File f = new File(\"./Save.txt\");\r\n            FileOutputStream fos = new FileOutputStream(f);\r\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\r\n            oos.writeObject(gradeTracker);\r\n            oos.close();\r\n            fos.close();\r\n            System.out.println(\"Saved!\");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    // Load Grade Tracker info from Save.txt file in src folder\r\n    public static GradeTracker load() {\r\n        File f = new File(\"./Save.txt\");\r\n        try {\r\n            FileInputStream fis = new FileInputStream(f);\r\n            ObjectInputStream ois = new ObjectInputStream(fis);\r\n            GradeTracker gradeTracker = (GradeTracker) ois.readObject();\r\n            System.out.println(\"Loaded!\\n\");\r\n            return gradeTracker;\r\n        } catch (IOException | ClassNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// Old Code\r\n/*\r\ncase 100: // Secret Menu for unused methods\r\n                    try{\r\n                        System.out.println(\"\\nSecret Menu\");\r\n                        System.out.println(\"\\nUsed for unused things\");\r\n                        double overallTotalMarks = gradeTracker.students.get(0).getModules().\r\n                                get(0).getOverallTotalMarks();\r\n                        System.out.println(\"Overall total marks for index 0: \"\r\n                                + overallTotalMarks);\r\n                        double weightageMarks = gradeTracker.students.get(0).getModules().get(0).\r\n                                getAssessments().get(0).getWeightageMarks();\r\n                        System.out.println(\"Weightage Marks for index 0: \"\r\n                                + weightageMarks);\r\n                    } catch (Exception exception) {\r\n                        System.out.println(\"Well... Loading Failed?\");\r\n                    }\r\n                    break;\r\n */\r\n/*.\r\npublic static void save(GradeTracker) {\r\n        try {\r\n            File f = new File(\"./Save.txt\");\r\n            if (f.exists()) {\r\n                FileOutputStream fos = new FileOutputStream(f);\r\n                ObjectOutputStream oos = new ObjectOutputStream(fos);\r\n                oos.writeObject(gradeTracker);\r\n                oos.close();\r\n                fos.close();\r\n                System.out.println(\"Saved!\");\r\n            } else {\r\n                f.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(f);\r\n                ObjectOutputStream oos = new ObjectOutputStream(fos);\r\n                oos.writeObject(gradeTracker);\r\n                oos.close();\r\n                fos.close();\r\n                System.out.println(\"Saved!\\n\");\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GradeTracker.java b/src/GradeTracker.java
--- a/src/GradeTracker.java	(revision 35e7aa751cc03bba9f9f712ac41f2f2549e9678a)
+++ b/src/GradeTracker.java	(date 1660589017881)
@@ -16,14 +16,13 @@
 
         int choice = 0;
 
-        while (choice != 5) {
+        while (choice != 4) {
             choice = nextInt(String.format(
                     "%nPlease select the following menu options:%n" +
                     "1. Student Management%n" +
-                    "2. Module Management%n" +
-                    "3. Assessment Management%n" +
-                    "4. Save/Load File%n" +
-                    "5. End Programme%n" +
+                    "2. Module & Assessment Management%n" +
+                    "3. Save/Load File%n" +
+                    "4. End Programme%n" +
                     "Enter Choice: "));
 
 
@@ -32,12 +31,9 @@
                     gradeTracker.studentManagementOptions();
                     break;
                 case 2:
-                    gradeTracker.moduleManagementOptions();
+                    gradeTracker.moduleAssessmentManagementOptions();
                     break;
                 case 3:
-                    gradeTracker.assessmentManagementOptions();
-                    break;
-                case 4:
                     int subChoice = nextInt("""
 
                             Save/Load
@@ -65,7 +61,7 @@
                     }
                     break;
                 default:
-                    if (choice != 5) {
+                    if (choice != 4) {
                         System.out.println("Please select a correct option");
                     }
                     break;
@@ -620,7 +616,7 @@
 
 
     // Module Management & Methods
-    public void moduleManagementOptions() {
+    public void moduleAssessmentManagementOptions() {
         int subChoice = 0;
         while(subChoice != 6) {
             subChoice = nextInt(String.format(
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9d94cd41-76b0-47da-90bf-92dcfb8577aa\" name=\"Changes\" comment=\"1.50\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/AssessListSaveFile.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Assessment.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Assessment.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/GradeTracker.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/GradeTracker.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Module.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Module.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/PreDefMod.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/PreDefMod.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2DE07OHeEEXfcg49Zz0CPjtEnhZ\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9d94cd41-76b0-47da-90bf-92dcfb8577aa\" name=\"Changes\" comment=\"\" />\r\n      <created>1660248771003</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1660248771003</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1.24\">\r\n      <created>1660289863516</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1660289863516</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"1.50\">\r\n      <created>1660298374442</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1660298374442</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"1.24\" />\r\n    <MESSAGE value=\"1.50\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"1.50\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 35e7aa751cc03bba9f9f712ac41f2f2549e9678a)
+++ b/.idea/workspace.xml	(date 1660663857768)
@@ -1,13 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="9d94cd41-76b0-47da-90bf-92dcfb8577aa" name="Changes" comment="1.50">
-      <change afterPath="$PROJECT_DIR$/src/AssessListSaveFile.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Assessment.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Assessment.java" afterDir="false" />
+    <list default="true" id="9d94cd41-76b0-47da-90bf-92dcfb8577aa" name="Changes" comment="1.70">
       <change beforePath="$PROJECT_DIR$/src/GradeTracker.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GradeTracker.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Module.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Module.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/PreDefMod.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/PreDefMod.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -67,7 +62,14 @@
       <option name="project" value="LOCAL" />
       <updated>1660298374442</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="1.70">
+      <created>1660588065825</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1660588065825</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -84,6 +86,7 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="1.24" />
     <MESSAGE value="1.50" />
-    <option name="LAST_COMMIT_MESSAGE" value="1.50" />
+    <MESSAGE value="1.70" />
+    <option name="LAST_COMMIT_MESSAGE" value="1.70" />
   </component>
 </project>
\ No newline at end of file
